/**
 * Copyright (C) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.inject.tools.ideplugin.module;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import com.google.inject.Module;

/** 
 * Representation of a module context in the user's code.
 * 
 * @author Darren Creutz <dcreutz@gmail.com>
 */
public interface ModuleRepresentation {
	/**
	 * A runtime exception thrown when the class passed in does not implement {@link com.google.inject.Module}.
	 */
	public static class ClassNotModuleException extends RuntimeException {
		private static final long serialVersionUID = -5457372013999911754L; //autogenerated
		private final Class<?> theClass;
		
		/**
		 * Create a ClassNotModuleException.
		 * 
		 * @param theClass the class that does not implement Module
		 */
		public ClassNotModuleException(Class<?> theClass) {
			this.theClass = theClass;
		}
		
		/**
		 * Return the class that does not implement Module.
		 * 
		 * @return the class
		 */
		public Class<?> getTheClass() {
			return theClass;
		}
		
		/**
		 * (non-Javadoc)
		 * @see java.lang.Throwable#toString()
		 */
		@Override
		public String toString() {
			return "ClassNotModuleException: The class " + theClass.getName() + " is not a subclass of Module.";
		}
	}

	/**
	 * Return all the {@link Constructor}s the given module class has.
	 * 
	 * @return an array of constructors
	 */
	public Constructor<? extends Module>[] getConstructors();

	/**
	 * Set the constructor to use when creating instances.
	 * 
	 * @param constructor the {@link Constructor} to use
	 * @param arguments an array of arguments matching the constructor's signature
	 * @throws IllegalAccessException if the constructor is not accessible
	 * @throws IllegalArgumentException if the arguments are not valid for the constructor
	 * @throws InstantiationException if we cannot instantiate the module class
	 * @throws InvocationTargetException if the target is invalid
	 */
	public void setConstructor(Constructor<? extends Module> constructor,
			Object[] arguments) throws IllegalAccessException,
			IllegalArgumentException, InstantiationException,
			InvocationTargetException;

	/**
	 * Return the {@link Constructor} we are currently using.
	 * By default this will be the default constructor.
	 * 
	 * @return the constructor we use
	 */
	public Constructor<? extends Module> getConstructor();

	/**
	 * Return the arguments being passed to the constructor.
	 * 
	 * @return the arguments
	 */
	public Object[] getArguments();

	/**
	 * Return an instance of the module using the constructor and arguments passed in.
	 * By default the default constructor is used.
	 * 
	 * @return the {@link Module} object
	 */
	public Module getInstance();
	
	/**
	 * Tell if the module class has a default constructor.
	 * 
	 * @return true when the module class has a default contructor.
	 */
	public boolean hasDefaultConstructor();
	
	/**
	 * Return the name of this module.
	 * 
	 * @return the module name
	 */
	public String getName();
	
	/**
	 * Set the name of this module.
	 * 
	 * @param moduleName the module name
	 */
	public void setName(String moduleName);
	
	/**
	 * Can the module be instantiated?
	 * 
	 * @return true if the module can be instantiated
	 */
	public boolean isValid();
}